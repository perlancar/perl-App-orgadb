#!perl

use 5.010001;
use strict;
use warnings;

# AUTHORITY
# DATE
# DIST
# VERSION

use Perinci::CmdLine::Any;

# with subcommands, -c and -C checking to use with common_optswere not fixed yet
#my $cmdline = Perinci::CmdLine::Any->new(
#    url => '/App/orgadb/',
#    subcommands => {
#        select => {url => '/App/orgadb/select_addressbook_entries'},
#    },
#    default_subcommand => 'select',
#);

my $cmdline = Perinci::CmdLine::Any->new(
    summary => 'Select entries and fields from Org addressbook',
    url => '/App/orgadb/select_addressbook_entries',
    log => 1,
);

$cmdline->run;

# ABSTRACT:
# PODNAME:

=head1 SYNOPSIS

First, create a configuration file F<~/.config/orgadb.conf> containing something
like the following (use INI syntax, or L<IOD> to be more exact):

 ; specify your addressbook files here
 files = ~/addressbook.org
 files = /path/to/another-addressbook.org

Suppose you have F<~/addressbook.org> like the following (entries are written as
level-2 headings, level 1 is used for categories, hierarchical categories can be
written using breadcrumb-style notation with ">" separator):

 * family
 ** iwan
 - home phone :: 555-1234-567
 - cell :: 555-8765-432
 ** restu
 - cell :: 555-1234-568
 ** satya

 * family > wife's
 ** roger
 ** emily
 ** cynthia

 * work > acme inc
 ** bugs
 ** daffy

 * work > acme inc > ex
 ** marvin

 * work > newsradio
 ** dave
 ** lisa
 - cell :: 555-1234-710
 - home phone :: 555-1234-712
 - note ::
   + do not call after office hours
 ** joe
 - cell :: 555-1234-569
 - cell :: 555-1234-570
 ** beth

 * work > newsradio > ex
 ** matthew

=head2 Listing all entries

To list all entries (categories will be shown as path prefix):

 % orgadb
 family/iwan
 family/restu
 family/satya
 family > wife's/roger
 family > wife's/emily
 family > wife's/cynthia
 work > acme inc/bugs
 work > acme inc/daffy
 work > acme inc > ex/ marvin
 work > newsradio/dave
 work > newsradio/lisa
 work > newsradio/joe
 work > newsradio/beth
 work > newsradio > ex/matthew

=head2 Searching entries

To list entries that match the string 'sa':

 % orgadb sa
 family/satya
 work > newsradio/lisa

To hide the category prefix, use C<-C> (C<--hide-category>):

 % orgadb -C sa
 satya
 lisa

=head2 Searching categories

To search against the category, use the C<-c> option:

 % orgadb sa -c work; # search for 'sa' from work
 work > newsradio/lisa

 % orgadb -c work; # list all entries from work
 work > newsradio/dave
 work > newsradio/lisa
 work > newsradio/joe
 work > newsradio/beth
 work > newsradio > ex/matthew

To display Lisa's full entry:

 % orgadb lisa -l
 work > newsradio/lisa
 - cell :: 555-1234-710
 - home phone :: 555-1234-712
 - note ::
   + do not call cell after office hours

 % orgadb lisa -Cl  ;# do not show the category
 lisa
 - cell :: 555-1234-710
 - home phone :: 555-1234-712
 - note ::
   + do not call cell after office hours

=head2 Searching fields

To get Lisa's cell phone number (search field):

 % orgadb lisa cell
 work > newsradio/lisa
   - cell :: 555-1234-710

(NOT YET IMPLEMENTED) To get Lisa's cell phone number (only the number, without
the field namae):

 % orgadb lisa cell -F
 555-1234-710

To get all Lisa's phone numbers:

 % orgadb lisa -F '/phone|cell/'
 - cell :: 555-1234-710
 - home phone :: 555-1234-712

=head2 Formatting

NOT YET IMPLEMENTED


=head1 DESCRIPTION

B<EARLY RELEASE, MANY OPTIONS ARE NOT YET ADDED OR IMPLEMETED.>

B<App::orgadb> is a tool for your addressbook written in Org format. It
currently contains:

=over

=item * orgadb

CLI to find/show addressbook entries/fields.

=back

The addressbook must be written following a certain structure, as shown in the
Synopsis. The first heading level is for putting categories. The second heading
level is where you put all your entries. Fields are written in description list.


=head1 FAQ

=head2 Why doesn't 'orgadb' list all my entries? It returns nothing.

 % orgadb
 % _

Probably because the addressbook is not written following the expected
structure, where the entries should be as I<level-2> headings. You might use the
level-1 heading:

 * jimmy
 - cell :: 555-123-4567
 * john
 * jack

or use deeper-than-level-2 heading:

 * friends
 ** high school
 *** jimmy
 - cell :: 555-123-4567
 *** john
 *** jack

This is the correct structure:

 * friends > high school
 ** jimmy
 - cell :: 555-123-4567
 ** john
 ** jack

When queried:

 % orgadb
 friends > high school/jimmy
 friends > high school/john
 friends > high school/jack

=head2 Why can't I search against entry fields? It returns nothing. (I can list entries.)

 % orgadb jimmy cell
 % _

Probably because the addressbook is not written following the expected
structure, where you should use a description list. A common mistake is writing
a description list like this:

 ** jimmy
 - cell: 555-123-4567

This is still an unordered list in Org, you have to use C< :: > (space, followed
by two colons, followed by another space) as the separator:

 ** jimmy
 - cell :: 555-123-4567


=head1 SEE ALSO

L<orgsel> (from L<App::orgsel>) is a more generic selection tool for Org
document.

Information about the Org format: L<https://orgmode.org>
