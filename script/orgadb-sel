#!perl

use 5.010001;
use strict;
use warnings;

# AUTHORITY
# DATE
# DIST
# VERSION

use Perinci::CmdLine::Any;

my $cmdline = Perinci::CmdLine::Any->new(
    summary => 'Select entries and fields from Org addressbook',
    url => '/App/orgadb/select',
    log => 1,
    config_filename => ['orgadb.conf', 'orgadb-sel.conf'],
);

$cmdline->run;

# ABSTRACT:
# PODNAME:

=head1 SYNOPSIS

# BEGIN_CODE
# show generated usage line

require App::orgadb;
require Perinci::CmdLine::Dump;

my $res = Perinci::CmdLine::Dump::dump_pericmd_script(filename=>"script/orgadb-sel", libs=>["lib"]);
die "Can't dump script/orgadb-sel: $res->[0] - $res->[1]" unless $res->[0] == 200;
my $cli = $res->[2];

require Perinci::Sub::To::CLIDocData;
$res = Perinci::Sub::To::CLIDocData::gen_cli_doc_data_from_meta(meta => $App::orgadb::SPEC{select}, common_opts => $cli->{common_opts});
die "Can't gen_cli_doc_data_from_meta(): $res->[0] - $res->[1]" if $res->[0] != 200;
my $usage = $res->[2]{'usage_line.alt.fmt.pod'};
$usage =~ s/\[\[prog\]\]/B<orgadb-sel>/;
print "$usage\n\n";

# END_CODE

First, create a configuration file F<~/.config/orgadb.conf> containing something
like the following (use INI syntax, or L<IOD> to be more exact):

 ; specify your addressbook files here
 files = ~/addressbook.org
 files = /path/to/another-addressbook.org

Suppose you have F<~/addressbook.org> like the following (entries are written as
level-2 headings, level 1 is used for categories, hierarchical categories can be
written using breadcrumb-style notation with ">" separator):

 * family
 ** iwan
 - home phone :: 555-1234-567
 - cell :: 555-8765-432
 - address ::
   + street :: Jl Mangga 123
   + city :: Bandung
   + postcode :: 40123
   + country :: Indonesia
 ** restu
 - cell :: 555-1234-568
 ** satya

 * family > wife's
 ** roger
 ** emily
 ** cynthia

 * work > acme inc
 ** bugs
 ** daffy

 * work > acme inc > ex
 ** marvin

 * work > newsradio
 ** dave
 ** lisa
 - cell :: 555-1234-710
 - home phone :: 555-1234-712
 - note ::
   + [2022-07-03] :: do not call after office hours
 ** joe
 - cell :: 555-1234-569
 - cell :: 555-1234-570
 ** beth

 * work > newsradio > ex
 ** matthew

=head2 Listing all entries

To list all entries (categories will be shown as path prefix):

 % orgadb-sel
 ** family/iwan
 ** family/restu
 ** family/satya
 ** family > wife's/roger
 ** family > wife's/emily
 ** family > wife's/cynthia
 ** work > acme inc/bugs
 ** work > acme inc/daffy
 ** work > acme inc > ex/ marvin
 ** work > newsradio/dave
 ** work > newsradio/lisa
 ** work > newsradio/joe
 ** work > newsradio/beth
 ** work > newsradio > ex/matthew

=head2 Searching entries by name

To list entries that match the string 'sa':

 % orgadb-sel sa
 ** family/satya
 ** work > newsradio/lisa

To hide the category prefix, use C<-C> (C<--hide-category>):

 % orgadb-sel -C sa
 ** satya
 ** lisa

=head2 Filtering entries by categories

To only include entries that have certain category name, use the C<-c> option:

 % orgadb-sel sa -c work; # search for entries 'sa' from category 'work'
 ** work > newsradio/lisa

 % orgadb-sel -c work; # list all entries from category 'work'
 ** work > newsradio/dave
 ** work > newsradio/lisa
 ** work > newsradio/joe
 ** work > newsradio/beth
 ** work > newsradio > ex/matthew

To display Lisa's full entry:

 % orgadb-sel lisa -l
 ** work > newsradio/lisa
 - cell :: 555-1234-710
 - home phone :: 555-1234-712
 - note ::
   + [2022-07-03] :: do not call after office hours

 % orgadb-sel lisa -Cl  ;# do not show the category
 ** lisa
 - cell :: 555-1234-710
 - home phone :: 555-1234-712
 - note ::
   + [2022-07-03] :: do not call after office hours

 % orgadb-sel lisa -El  ;# do not show the entry line
 - cell :: 555-1234-710
 - home phone :: 555-1234-712
 - note ::
   + [2022-07-03] :: do not call after office hours

=head2 Filtering entries by the fields they have

Aside from by category, we can filter entries by the fields they have. For
example, to only list entries that have 'bank information' field:

 % orgadb-sel --filter-entries-by-fields '/bank information/'

Another example, to only include entries that have 'deceased' field set to
'true' or 'y/'yes':

 % orgadb-sel --filter-entries-by-fields '/deceased/ = /(?:true|yes|y)/i'

=head2 Searching fields

To get Lisa's cell phone number (search against field name):

 % orgadb-sel lisa cell
 ** work > newsradio/lisa
 - cell :: 555-1234-710

To get Lisa's cell phone number (only the number, without the entry headline or
the field name):

 % orgadb-sel lisa cell -E -N
 555-1234-710

To get all Lisa's phone numbers:

 % orgadb-sel lisa -E '/phone|cell/'
 - cell :: 555-1234-710
 - home phone :: 555-1234-712

You can also search subfields. For example, to show Iwan's postcode field value
under the address field:

 % orgadb-sel iwan address postcode -EN
 40123

=head2 Formatting

You can apply one or more formatters to field values:

 % orgadb-sel lisa cell --formatter Str::remove_non_digit -EN
 5551234710

=head2 Copying to clipboard

Instead of just displaying result to terminal, you can instruct to also copy
matching field values to clipboard with the `--clipboard=tee` (`-y`) option:

 % orgadb-sel lisa cell -y
 ** work > newsradio/lisa
 - cell :: 555-1234-710

(and clipboard will contain C<555-1234-710>).

You can also instruct to only output matching field values to clipboard and not
print matching fields to terminal using the `--clipboard=only` (`-Y`) option:

 % orgadb-sel lisa cell -Y
 ** work > newsradio/lisa

(and clipboard will contain C<555-1234-710>).

=head2 Shell mode

Instead of selecting one time and exiting, you can instruct B<orgadb-sel> to
enter shell mode, where you can issue multiple select commands without
re-reading the Org addressbook files repeatedly. For example:

 % orgadb-sel -s
 > select lisa
 ...
 > select lisa -l
 ...
 > select lisa cell -E -N
 ...
 > exit

 % _

When the addressbook files change on disk, the files will be re-read.

=head2 Password book

Aside from a regular addressbook, you can also use B<orgadb-sel> with password
books (a file you store passwords in). B<orgadb-sel> can read GnuPG-encrypted
files, where the decrypted content is read into memory and not stored in
temporary files. You can then use shell mode (C<-s>) to repeatedly query the
password book without re-reading and re-decrypting everytime. For example,
suppose you have a password book like this:

 # -*- Mode: org -*-
 * persona > perlancar
 ** google (perlancar)
 - username :: perlancar
 - pass :: secret1
 - security question :: favorite dog in the whole wide world?
 - security answer :: impossible to pick one
 - log ::
   + [2022-07-04 Mon] :: change password
   + [2017-08-01] :: create
 ** twitter (perlancar)
 - username :: perlancar
 - pass :: secret2
 * persona > steven
 ** google (steven123123)
 - username :: steven123123
 - phone :: 555-123-2345
 - pass :: secret3

and you store it in C<~/passwords.gpg>. Then to query passwords:

 # What's my (perlancar)'s google password?
 % orgadb-sel -f ~/passwords.gpg /google.+perlancar/ pass -EN
 secret1

 # What's my (steven)'s phone used in the google account?
 % orgadb-sel -f ~/passwords.gpg /google.+steven/ '/phone|cell/' -EN
 555-123-2345

Or, in shell mode:

 % orgadb-sel -f ~/passwords.gpg -s
 > select /google.+perlancar/ pass -EN
 secret1
 > select /google.+steven/ '/phone|cell/' -EN
 555-123-2345
 > exit

 % _

The C<--clipboard=only> (C<-Y>) option is handy when querying password book; you
can choose to output field values only to clipboard instead of to terminal:

 # What's my (perlancar)'s google password?
 % orgadb-sel -f ~/passwords.gpg /google.+perlancar/ pass -EN -Y


=head1 DESCRIPTION

B<App::orgadb> is a set of CLIs for addressbook written in Org format. It
currently contains:

=over

=item * orgadb-sel

CLI to list/select addressbook entries and fields.

=back

The addressbook must be written following a certain structure, as shown in the
Synopsis. The first heading level is for putting categories. The second heading
level is where you put all your entries. Fields are written in description list.


=head1 append:FILES

=head2 ~/.orgadb_sel_history

Store shell's command history for B<orgadb-sel>.


=head1 TIPS AND TRICKS

=head2 Aliasing orgadb-sel to a shorter command name

If you are like me and you select from addressbooks a lot, you might want to
alias C<orgadb-sel> to a shorter name, e.g. C<sel>. To do this, create this
script somewhere in your PATH:

 #!/usr/bin/env perl
 # FRAGMENT id=shcompgen-hint command=orgadb-sel
 exec "orgadb-sel", @ARGV;

The C<# FRAGMENT> line is optional (it's useful if you use L<shcompgen>). In
your bash startup file, put something like:

 complete -C orgadb-sel sel

or if you L<shcompgen>, run C<shcompgen gen sel> instead.

=head2 Tab completion

The script provides tab completion for category, entry, and field, so you can
type:

 % orgadb-sel --category <tab>        ;# see what categories are available
 % orgadb-sel lis<tab>                ;# complete with entries matching 'lis'
 % orgadb-sel lisa <tab>              ;# complete with available fields of /lisa/ entries

=head2 Using field formatters

Suppose you want to format phone number using international notation:

 % orgadb-sel lisa phone -f Phone::format

=head2 Using default field formatter rules

Instead of specifying formatters everytime, you can setup rules for default
formatters in the configuration file:

 default_formatter_rules={"hide_field_name":true, "formatters":["Str::remove_comment"]}
 default_formatter_rules={"field_name_matches":"/te?lp|wa|phone|whatsapp|hp/i","hide_field_name":true,  "formatters":["Phone::format_idn_nospace"]}
 default_formatter_rules={"field_name_matches":"/te?lp|wa|phone|whatsapp|hp/i","hide_field_name":false, "formatters":["Phone::format_idn"]}

and after this, when you select they will automatically be applied when
selecting matching fields:

 % orgadb-sel lisa phone

To disable formatters, use C<--no-formatters> (C<-F>).

=head2 Copying to clipboard

Instead of manually copy-pasting the result of C<orgadb-sel> using your mouse in
the terminal and pasting to other GUI application (like LibreOffice Writer/Calc,
WhatsApp Web in Firefox, or whatever), you can instruct C<orgadb-sel> to copy to
clipboard for you:

 % orgadb-sel -c lisa phone


=head1 FAQ

=head2 Why doesn't 'orgadb-sel' list all my entries? It returns nothing.

 % orgadb-sel
 % _

Probably because the addressbook is not written following the expected
structure, where the entries should be as I<level-2> headings. You might use the
level-1 heading:

 * jimmy
 - cell :: 555-123-4567
 * john
 * jack

or use deeper-than-level-2 heading:

 * friends
 ** high school
 *** jimmy
 - cell :: 555-123-4567
 *** john
 *** jack

This is the correct structure:

 * friends > high school
 ** jimmy
 - cell :: 555-123-4567
 ** john
 ** jack

When queried:

 % orgadb-sel
 friends > high school/jimmy
 friends > high school/john
 friends > high school/jack

=head2 Why can't I search against entry fields? It returns nothing. (I can list entries.)

 % orgadb-sel jimmy cell
 % _

Probably because the addressbook is not written following the expected
structure, where you should use a description list. A common mistake is writing
a description list like this:

 ** jimmy
 - cell: 555-123-4567

This is still an unordered list in Org, you have to use C< :: > (space, followed
by two colons, followed by another space) as the separator:

 ** jimmy
 - cell :: 555-123-4567


=head1 SEE ALSO

L<orgsel> (from L<App::orgsel>) is a more generic selection tool for Org
document.

Other CLI's in this distribution.

Information about the Org format: L<https://orgmode.org>
